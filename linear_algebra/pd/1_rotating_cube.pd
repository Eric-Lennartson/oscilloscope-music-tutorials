#N canvas 395 107 336 433 12;
#N canvas 518 -626 546 271 cube_pts_arrays 0;
#X obj 227 39 loadbang;
#X obj 15 53 array define xpts 16;
#X obj 15 83 array define ypts 16;
#X obj 15 113 array define zpts 16;
#X obj 244 95 array set xpts;
#X obj 237 155 array set ypts;
#X obj 227 215 array set zpts;
#X msg 244 67 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 1 1 1 1 -1;
#X msg 237 127 -1 1 1 -1 -1 -1 1 1 1 1 1 1 -1 -1 -1 -1;
#X msg 227 187 1 1 1 1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1;
#X connect 0 0 8 0;
#X connect 0 0 9 0;
#X connect 0 0 7 0;
#X connect 7 0 4 0;
#X connect 8 0 5 0;
#X connect 9 0 6 0;
#X restore 26 18 pd cube_pts_arrays;
#X obj 26 86 phasor~;
#X floatatom 26 55 5 0 0 1 frequency - - 0;
#X obj 26 112 *~ 16;
#N canvas 328 287 750 269 tabreadlin~ 0;
#X obj 197 72 tabread~ ypts;
#N canvas 92 117 321 196 lerp~ 0;
#X obj 114 47 inlet~ v0;
#X obj 216 47 inlet~ v1;
#X obj 12 47 inlet~ t;
#X obj 12 96 expr~ (1-$v1) * $v2 + $v1 * $v3;
#X obj 12 132 outlet~;
#X connect 0 0 3 1;
#X connect 1 0 3 2;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X restore 27 180 pd lerp~;
#X obj 414 59 +~ 1;
#X obj 29 86 wrap~;
#N canvas 92 117 321 196 lerp~ 0;
#X obj 114 47 inlet~ v0;
#X obj 216 47 inlet~ v1;
#X obj 12 47 inlet~ t;
#X obj 12 96 expr~ (1-$v1) * $v2 + $v1 * $v3;
#X obj 12 132 outlet~;
#X connect 0 0 3 1;
#X connect 1 0 3 2;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X restore 166 182 pd lerp~;
#X obj 414 130 tabread~ xpts;
#X obj 524 130 tabread~ ypts;
#X obj 88 72 tabread~ xpts;
#X obj 414 89 expr~ fmod($v1 \, 16);
#N canvas 92 117 321 196 lerp~ 0;
#X obj 114 47 inlet~ v0;
#X obj 216 47 inlet~ v1;
#X obj 12 47 inlet~ t;
#X obj 12 96 expr~ (1-$v1) * $v2 + $v1 * $v3;
#X obj 12 132 outlet~;
#X connect 0 0 3 1;
#X connect 1 0 3 2;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X restore 396 182 pd lerp~;
#X obj 634 130 tabread~ zpts;
#X obj 297 72 tabread~ zpts;
#X obj 29 10 inlet~;
#X obj 27 206 outlet~ x;
#X obj 166 208 outlet~ y;
#X obj 396 208 outlet~ z;
#X connect 0 0 4 1;
#X connect 1 0 13 0;
#X connect 2 0 8 0;
#X connect 3 0 1 0;
#X connect 3 0 4 0;
#X connect 3 0 9 0;
#X connect 4 0 14 0;
#X connect 5 0 1 2;
#X connect 6 0 4 2;
#X connect 7 0 1 1;
#X connect 8 0 5 0;
#X connect 8 0 6 0;
#X connect 8 0 10 0;
#X connect 9 0 15 0;
#X connect 10 0 9 2;
#X connect 11 0 9 1;
#X connect 12 0 3 0;
#X connect 12 0 7 0;
#X connect 12 0 0 0;
#X connect 12 0 11 0;
#X connect 12 0 2 0;
#X restore 26 139 pd tabreadlin~;
#X obj 26 347 clip~ -1 1;
#X obj 56 310 clip~ -1 1;
#X floatatom 146 55 5 0 0 1 x_angle - - 0;
#X floatatom 226 128 5 0 0 1 z_angle - - 0;
#X obj 226 178 *~ 360;
#X obj 226 152 phasor~ 0.1;
#N canvas 63 88 450 300 scale~ 0;
#X obj 82 30 inlet~;
#X obj 81 192 outlet~;
#X obj 82 116 *~;
#X obj 290 30 inlet;
#X msg 290 56 \$1 15;
#X obj 290 82 vline~;
#X obj 142 30 inlet~;
#X obj 141 192 outlet~;
#X obj 142 116 *~;
#X obj 202 30 inlet~;
#X obj 201 192 outlet~;
#X obj 202 116 *~;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 11 1;
#X connect 5 0 8 1;
#X connect 5 0 2 1;
#X connect 6 0 8 0;
#X connect 8 0 7 0;
#X connect 9 0 11 0;
#X connect 11 0 10 0;
#X restore 26 269 pd scale~;
#X floatatom 105 270 5 0 0 1 size - - 0;
#N canvas 31 133 716 408 rotate 0;
#X obj 37 35 inlet~ x;
#X obj 38 329 outlet~ x;
#X obj 101 35 inlet~ y;
#X obj 165 35 inlet~ z;
#X obj 128 329 outlet~ y;
#X obj 250 329 outlet~ z;
#N canvas 730 -827 490 170 new_x 0;
#X obj 34 125 outlet~;
#X obj 34 27 inlet~;
#X obj 34 53 snake~ out 9, f 60;
#X obj 34 89 expr~ $v6 * $v8 * $v1 - $v6 * $v9 * $v2 + $v7 * $v3 \;, f 60;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 3 1;
#X connect 2 2 3 2;
#X connect 2 5 3 5;
#X connect 2 6 3 6;
#X connect 2 7 3 7;
#X connect 2 8 3 8;
#X connect 3 0 0 0;
#X restore 38 273 pd new_x;
#X f 11;
#N canvas 205 -802 500 179 new_y 0;
#X obj 34 125 outlet~;
#X obj 34 27 inlet~;
#X obj 34 53 snake~ out 9, f 60;
#X obj 34 83 expr~ ($v4 * $v9 + $v5 * $v7 * $v8) * $v1 + ($v4 * $v8 - $v5 * $v7 * $v9) * $v2 - $v5 * $v6 * $v3 \;;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 3 1;
#X connect 2 2 3 2;
#X connect 2 3 3 3;
#X connect 2 4 3 4;
#X connect 2 5 3 5;
#X connect 2 6 3 6;
#X connect 2 7 3 7;
#X connect 2 8 3 8;
#X connect 3 0 0 0;
#X restore 128 273 pd new_y;
#X f 16;
#N canvas 83 365 484 162 new_z 0;
#X obj 34 125 outlet~;
#X obj 34 27 inlet~;
#X obj 34 53 snake~ out 9, f 60;
#X obj 34 83 expr~ ($v5 * $v9 - $v4 * $v7 * $v8) * $v1 + ($v4 * $v7 * $v9 + $v5 * $v8) * $v2 + $v4 * $v6 * $v3 \;;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 3 1;
#X connect 2 2 3 2;
#X connect 2 3 3 3;
#X connect 2 4 3 4;
#X connect 2 5 3 5;
#X connect 2 6 3 6;
#X connect 2 7 3 7;
#X connect 2 8 3 8;
#X connect 3 0 0 0;
#X restore 250 273 pd new_z;
#X f 16;
#X obj 230 35 inlet~ ax;
#X obj 358 35 inlet~ ay;
#X obj 487 35 inlet~ az;
#X obj 37 210 snake~ in 9, f 74;
#N canvas 325 196 857 350 cos~ 0;
#X obj 45 115 inlet~;
#X obj 45 141 expr~ ($v1 * 3.141592) / 180;
#X text 254 140 deg to rad;
#X obj 45 167 expr~ cos($v1);
#X text 375 53 What's the Difference Between [cos~] & [expr~]?;
#X obj 45 193 outlet~;
#X obj 589 30 cos~;
#X obj 652 30 expr~ cos($v1);
#X text 395 83 For [expr~] \, the cosine function is what you'd expect it to be: The cosine function. It takes an angle in radians as input and returns the result. For [cos~] though \, it's a little different. It is a wavetable lookup \, usually used for making oscillators. This is a very standard way to save some DSP calculation time and optomize the code for performance. However \, it takes PHASE (0.0 -> 1.0) as input instead and then returns the result. They will both make cosine waves \, BUT since [cos~] expects phase instead of an angle \, if we used that instead of [expr~] we wouldn't get the smooth rotation that we're looking for. It's a small but important distinction that doesn't show up that often!;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 3 0 5 0;
#X restore 230 105 pd cos~;
#N canvas 325 196 857 350 sin~ 0;
#X obj 45 115 inlet~;
#X obj 45 141 expr~ ($v1 * 3.141592) / 180;
#X text 254 140 deg to rad;
#X text 375 53 What's the Difference Between [cos~] & [expr~]?;
#X obj 45 193 outlet~;
#X obj 589 30 cos~;
#X obj 652 30 expr~ cos($v1);
#X obj 45 167 expr~ sin($v1);
#X text 395 83 For [expr~] \, the cosine function is what you'd expect it to be: The cosine function. It takes an angle in radians as input and returns the result. For [cos~] though \, it's a little different. It is a wavetable lookup \, usually used for making oscillators. This is a very standard way to save some DSP calculation time and optomize the code for performance. However \, it takes PHASE (0.0 -> 1.0) as input instead and then returns the result. They will both make cosine waves \, BUT since [cos~] expects phase instead of an angle \, if we used that instead of [expr~] we wouldn't get the smooth rotation that we're looking for. It's a small but important distinction that doesn't show up that often!;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 7 0 4 0;
#X restore 294 105 pd sin~;
#N canvas 325 196 857 350 cos~ 0;
#X obj 45 115 inlet~;
#X obj 45 141 expr~ ($v1 * 3.141592) / 180;
#X text 254 140 deg to rad;
#X obj 45 167 expr~ cos($v1);
#X text 375 53 What's the Difference Between [cos~] & [expr~]?;
#X obj 45 193 outlet~;
#X obj 589 30 cos~;
#X obj 652 30 expr~ cos($v1);
#X text 395 83 For [expr~] \, the cosine function is what you'd expect it to be: The cosine function. It takes an angle in radians as input and returns the result. For [cos~] though \, it's a little different. It is a wavetable lookup \, usually used for making oscillators. This is a very standard way to save some DSP calculation time and optomize the code for performance. However \, it takes PHASE (0.0 -> 1.0) as input instead and then returns the result. They will both make cosine waves \, BUT since [cos~] expects phase instead of an angle \, if we used that instead of [expr~] we wouldn't get the smooth rotation that we're looking for. It's a small but important distinction that doesn't show up that often!;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 3 0 5 0;
#X restore 358 105 pd cos~;
#N canvas 325 196 857 350 sin~ 0;
#X obj 45 115 inlet~;
#X obj 45 141 expr~ ($v1 * 3.141592) / 180;
#X text 254 140 deg to rad;
#X text 375 53 What's the Difference Between [cos~] & [expr~]?;
#X obj 45 193 outlet~;
#X obj 589 30 cos~;
#X obj 652 30 expr~ cos($v1);
#X obj 45 167 expr~ sin($v1);
#X text 395 83 For [expr~] \, the cosine function is what you'd expect it to be: The cosine function. It takes an angle in radians as input and returns the result. For [cos~] though \, it's a little different. It is a wavetable lookup \, usually used for making oscillators. This is a very standard way to save some DSP calculation time and optomize the code for performance. However \, it takes PHASE (0.0 -> 1.0) as input instead and then returns the result. They will both make cosine waves \, BUT since [cos~] expects phase instead of an angle \, if we used that instead of [expr~] we wouldn't get the smooth rotation that we're looking for. It's a small but important distinction that doesn't show up that often!;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 7 0 4 0;
#X restore 423 105 pd sin~;
#N canvas 325 196 857 350 cos~ 0;
#X obj 45 115 inlet~;
#X obj 45 141 expr~ ($v1 * 3.141592) / 180;
#X text 254 140 deg to rad;
#X obj 45 167 expr~ cos($v1);
#X text 375 53 What's the Difference Between [cos~] & [expr~]?;
#X obj 45 193 outlet~;
#X obj 589 30 cos~;
#X obj 652 30 expr~ cos($v1);
#X text 395 83 For [expr~] \, the cosine function is what you'd expect it to be: The cosine function. It takes an angle in radians as input and returns the result. For [cos~] though \, it's a little different. It is a wavetable lookup \, usually used for making oscillators. This is a very standard way to save some DSP calculation time and optomize the code for performance. However \, it takes PHASE (0.0 -> 1.0) as input instead and then returns the result. They will both make cosine waves \, BUT since [cos~] expects phase instead of an angle \, if we used that instead of [expr~] we wouldn't get the smooth rotation that we're looking for. It's a small but important distinction that doesn't show up that often!;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 3 0 5 0;
#X restore 487 105 pd cos~;
#N canvas 325 196 857 350 sin~ 0;
#X obj 45 115 inlet~;
#X obj 45 141 expr~ ($v1 * 3.141592) / 180;
#X text 254 140 deg to rad;
#X text 375 53 What's the Difference Between [cos~] & [expr~]?;
#X obj 45 193 outlet~;
#X obj 589 30 cos~;
#X obj 652 30 expr~ cos($v1);
#X obj 45 167 expr~ sin($v1);
#X text 395 83 For [expr~] \, the cosine function is what you'd expect it to be: The cosine function. It takes an angle in radians as input and returns the result. For [cos~] though \, it's a little different. It is a wavetable lookup \, usually used for making oscillators. This is a very standard way to save some DSP calculation time and optomize the code for performance. However \, it takes PHASE (0.0 -> 1.0) as input instead and then returns the result. They will both make cosine waves \, BUT since [cos~] expects phase instead of an angle \, if we used that instead of [expr~] we wouldn't get the smooth rotation that we're looking for. It's a small but important distinction that doesn't show up that often!;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 7 0 4 0;
#X restore 552 105 pd sin~;
#X connect 0 0 12 0;
#X connect 2 0 12 1;
#X connect 3 0 12 2;
#X connect 6 0 1 0;
#X connect 7 0 4 0;
#X connect 8 0 5 0;
#X connect 9 0 13 0;
#X connect 9 0 14 0;
#X connect 10 0 15 0;
#X connect 10 0 16 0;
#X connect 11 0 17 0;
#X connect 11 0 18 0;
#X connect 12 0 6 0;
#X connect 12 0 7 0;
#X connect 12 0 8 0;
#X connect 13 0 12 3;
#X connect 14 0 12 4;
#X connect 15 0 12 5;
#X connect 16 0 12 6;
#X connect 17 0 12 7;
#X connect 18 0 12 8;
#X restore 26 204 pd rotate;
#X f 29;
#X floatatom 186 85 5 0 0 1 y_angle - - 0;
#X obj 26 383 dac~;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X connect 4 0 13 0;
#X connect 4 1 13 1;
#X connect 4 2 13 2;
#X connect 5 0 15 0;
#X connect 6 0 15 1;
#X connect 7 0 13 3;
#X connect 8 0 10 0;
#X connect 9 0 13 5;
#X connect 10 0 9 0;
#X connect 11 0 5 0;
#X connect 11 1 6 0;
#X connect 12 0 11 3;
#X connect 13 0 11 0;
#X connect 13 1 11 1;
#X connect 13 2 11 2;
#X connect 14 0 13 4;
