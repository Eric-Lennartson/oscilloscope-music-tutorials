#N canvas 484 78 287 366 12;
#X obj 19 319 dac~;
#X obj 19 272 clip~ -1 1;
#X obj 97 272 clip~ -1 1;
#N canvas 63 88 450 300 circle~ 0;
#X obj 98 28 inlet~;
#X obj 103 187 outlet~;
#X obj 223 187 outlet~;
#X obj 100 142 cos~;
#X obj 151 95 +~ 0.25;
#X obj 151 141 cos~;
#X connect 0 0 3 0;
#X connect 0 0 4 0;
#X connect 3 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X restore 19 81 pd circle~;
#X obj 86 237 +~;
#X obj 19 237 +~;
#X obj 19 107 *~ 0.5;
#X obj 86 107 *~ 0.5;
#X obj 19 48 phasor~ 120;
#X floatatom 19 23 5 0 0 1 frequency - - 0;
#N canvas 534 150 596 360 sqr_wave~ 0;
#X obj 24 98 expr~ $v1 > 0.5;
#X obj 24 314 outlet~;
#X text 148 66 Vanilla pd doesn't have a built in square wave. But this expression is all we need to get the job done. A square wave oscillates between two values \, so we can just use an expression like this one \, which just returns true or false -- 0 or 1 --. Voil√† \, a square wave!;
#X obj 24 200 *~ 2;
#X obj 24 226 -~ 1;
#X text 147 182 The square wave is currenly just oscillating between 0 and 1 \, so we multiply by 2 and subtract 1 to make it oscillate from -1 to 1 instead., f 46;
#X obj 24 73 phasor~ 60;
#X obj 24 42 inlet;
#X connect 0 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X connect 6 0 0 0;
#X connect 7 0 6 0;
#X restore 104 175 pd sqr_wave~;
#X floatatom 104 143 5 0 0 1 frequency - - 0;
#X obj 104 204 *~ 0.5;
#X connect 1 0 0 0;
#X connect 2 0 0 1;
#X connect 3 0 6 0;
#X connect 3 1 7 0;
#X connect 4 0 2 0;
#X connect 5 0 1 0;
#X connect 6 0 5 0;
#X connect 7 0 4 0;
#X connect 8 0 3 0;
#X connect 9 0 8 0;
#X connect 10 0 12 0;
#X connect 11 0 10 0;
#X connect 12 0 4 1;
